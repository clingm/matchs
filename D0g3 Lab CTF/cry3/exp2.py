from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes
from math import gcd
from sage.all import *
flag = b'flag{***********************************}'

def DiffieEncrypt():
    p, q = getPrime(1024), getPrime(1024)
    E = [getPrime(512) for _ in range(3)]
    e1, e2, e3 = E[0] * E[1], E[0] * E[2], E[1] * E[2]
    n = p * q
    m = bytes_to_long(flag)
    c1, c2, c3 = pow(m, e1, p * q), pow(m, e2, p * q), pow(m, e3, p * q)
    return n, e1, e2, e3, c1, c2, c3

n, e1, e2, e3, c1, c2, c3 = (10030417580499424456562222052241088139487424318007921483082408909098985029746027104018596276222996901401205267470071082635674469599821570432910950893871537059869034832327976944486161025704963628973292437124227597764323757992666717548675784845930038626024666845566032651582846802363238399764586862408633701246230902714722610971077359095164070253676701777981249036912130115490195334779324955266862168422447061631359026003139847532423737439785477394491174757369066402655223248280974815146301136072687228741661086387313963979089357954639429677571811014501188684773719018587399026200302988205941433764437917512592306660431, 105860422981081253432855162757790906422216704481370548796397940188870436338135528973673205853302743028161533583750553338282677478391651696200244547168247506329025365923205577250827279191125197236466250921372470693877941440698462154357980439692567578734296786522708783589596047436581461884615163085564884106097, 134383240075645410691965034265677436060423373396319213536336113390453672604120882333653180718968165827132557418274778686669232791728939324436550972611773217384039177632777802515722183765841080814501702848149236822150742889088652538674154169786029385881942479143305790615142221574513832842749738885826002557169, 82229415432878767119343119902673471958861757046408888507049964733970741604907944520410595874115349795926586010810152883118817199184939395182252945293020577125052037307784505301036581749509711947965740190198444292173577962297663750415497727973131904837786523665148915033823854965099389672266234232761631383617, 8311732581211702684764464690360459973924400198628939767153199971705729482122724082189983033862723955135517613081560530763688692166555860959020698003738850832778552971330337579873323098040505710196718196158476476320694529276432931114362161504580648926954965310305272274247216603750205780136413756625359420479998314719427112977596710785540838421406851093214198958401361094798516439518417797075893380195801969401781849083572339172198414606504730562240168169224648814632009519098215750282210661178724440420963775624442556120373032792074859357742195938216004457530406713166998648375728263482225072818987910774732086114122, 788741473104492765545779724150193119757511195043554594758248206120593280683732025015486708208111122017727530433787784217137190040164464186443780121647768793247778120732872055854588512276766695848260029640681781446357195764873136428887789445309232166568241663042278039819157107111345288118597862831054857722985050964870500918700486824550031085748176232277166740335579361558428393485834823607520645918200094850837469474568038819563333446400861963356269138970021772340671739386543441341985117500305601252920097376614502143530882022973484978252767424772783937530460085395259421405066059554141626424612824752186674421947, 6816767023245253139915259567206389832756888254153051549221254616279002040256819987517122496146297184536274882555358152251686582683697998391483593492009129603009747788119785631069854715833417346537144760734931982996348200109362078161209926592618755419745207702101953886323980736866367664378109091598177429449007138632850335709723714814768845532593786414146584725725122542348337252731525077674738629376389152313384711685378609027060157169042826876258676778263089838160867791420232262422967823362429032643536359227802097710505527470126331349368836478624540343428702074035584877955183738385157043977566986616098990471056)

E = [gcd(e1, e2), gcd(e1, e3), gcd(e2, e3)]

def attack(c1, c2, e1, e2):
    g, a, b = xgcd(e1, e2)
    if g != 1:
        return
    return power_mod(c1, a, n) * power_mod(c2, b, n) % n

m = attack(c1*inverse_mod(c2, n), c3, E[0]*(E[1] - E[2]), e3)
print(long_to_bytes(m))
